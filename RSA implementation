import math
import sys
import random 
from fractions import gcd


def calcN(p,q):
    return p*q

def calcPhi(p,q):
   return (p-1)*(q-1)

def createPubPrivKeys(phi):
    """
    This function will generate/return the public and private keys
    """
    lst = list(range(2,phi))
    e = choose_e(phi,lst) # (e,n) public key
    d = multInverse(e, phi)
    #print [e,d]
    return [e,d]

def choose_e(phi, lst):
    
    eNow = random.choice(lst)
    if gcd(eNow,phi) != 1:
                choose_e(phi,lst.remove(eNow))
    else:
        return int(eNow)


def multInverse(e, phi):
    x = e%phi
    for i in range(1,phi) :
        if((x*i)%phi == 1) :
            return i
p = 23
q = 37
n = calcN(p,q)

#print n
phi = calcPhi(p,q)
##print phi
e = int(createPubPrivKeys(phi)[0])
d = int(createPubPrivKeys(phi)[1])
  
   
    
     
       
"""
    for the sake of being afraid of losing the original code
"""
def createPubPrivKeys(phi):
    """
    This function will generate/return the public and private keys
    """
    lst = list(range(2,phi))
    e = choose_e(phi,lst) # (e,n) public key
    d = multInverse(e, phi)
    #print [e,d]
    return [e,d]

def choose_e(phi, lst):
    
    eNow = random.choice(lst)
    if gcd(eNow,phi) != 1:
                choose_e(phi,lst.remove(eNow))
    else:
        return int(eNow)

#createPubPrivKeys(521)


def multInverse(e, phi):
    x = e%phi
    for i in range(1,phi) :
        if((x*i)%phi == 1) :
            return i

#print multInverse(createPubPrivKeys(49979), 499979)

createPubPrivKeys(499979)

def encryption(m):
    asciiM = int(''.join(str(ord(c)) for c in m))
    encryptedM = asciiM**e % n
    print encryptedM
    return encryptedM
    
encryption('hi how are you')

#def decryption(c, d, n):
#    return mOrig

#def main(): 
#    p = 
#    q = 
#    e = 
#    n = calcN(p,q)
#    phi = calcPhi(p,q)
#    d = multInverse(e, phi)
#    m = sys.argv[1]
#    c = encrytion(m, e, n)
#    assert m == decryption(c, d, m)


#if __name__ == "__main__":
#    main()
